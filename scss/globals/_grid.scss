////////////////////////
////////////////////////
// THE FLEX GRID
////////////////////////

// NOTE: uses auto-prefixer

////////////////////////
////////////////////////
// GRID VARIABLES
////////////////////////

$gutter: 0; // gets divided in half
$base-columns: 12; // columns

// media query breakpoints
$break-xl: 80em; // 1280
$break-lg: 64em; // 1024
$break-md: 48em; // 768
$break-sm: 30em; // 480


////////////////////////
////////////////////////
// LAYOUT
////////////////////////


.container {
  max-width: 1140px;
  margin-left: auto;
  margin-right: auto;

  &--fluid {
    max-width: none;
  }

}

.block {
  display: block;
}

.full-width {
  width: 100%;
}

.grid {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  margin-left: -($gutter / 2);
  margin-right: -($gutter / 2);
}

.grid__item {
  flex: 0 0 auto;
  min-height: 1px; // prevent column from collapsing
  padding-left: ($gutter / 2);
  padding-right: ($gutter / 2);
}


////////////////////////
////////////////////////
// FLEX COLUMNS
////////////////////////

@mixin flex-columns($bp, $columns:$base-columns) {

  @for $i from 1 through $columns {

    .#{$bp}-#{$i} {
      flex-basis: ((100% / $columns)*$i);
      max-width: ((100% / $columns*$i));
    }

  }

  @for $i from 1 through $columns - 1 {

    .offset--#{$bp}-#{$i} {
      margin-left: ((100% / $columns)*$i);
    }

  }

}


////////////////////////
////////////////////////
// FLEX ITEM ATTRIBUTES
////////////////////////

@mixin flex-item-attributes($bp) {
  #{$bp}-flex-auto {
    flex: 1 1 auto;
  }

  #{$bp}-flex-grow {
    flex-grow: 1;
  }

  #{$bp}-no-flex-grow {
    flex-grow: 0;
  }

  #{$bp}-flex-shrink {
    flex-shrink: 1;
  }

  #{$bp}-no-flex-shrink {
    flex-shrink: 0;
  }

  #{$bp}-flex-none {
    flex: none;
  }
}


////////////////////////
////////////////////////
// FLEX BOX ATTRIBUTES
////////////////////////

@mixin flex-box-attributes($bp) {
  .grid {
    &--#{$bp}-inline-flex {
      display: inline-flex;
    }

    &--#{$bp}-flex-nowrap {
      flex-wrap: nowrap;
    }

    &--#{$bp}-flex-wrap-rev {
      flex-wrap: wrap-reverse;
    }

    &--#{$bp}-horizontal-rev {
      flex-direction: column-reverse;
    }

    &--#{$bp}-vertical {
      flex-direction: column;
    }

    &--#{$bp}-vertical-rev {
      flex-direction: row-reverse;
    }

    &--#{$bp}-start {
      justify-content: flex-start;
    }

    &--#{$bp}-center {
      justify-content: center;
    }

    &--#{$bp}-end {
      justify-content: flex-end;
    }

    &--#{$bp}-around {
      justify-content: space-around;
    }

    &--#{$bp}-between {
      justify-content: space-between;
    }

    &--#{$bp}-top {
      align-items: flex-start;
    }

    &--#{$bp}-middle {
      align-items: center;
    }

    &--#{$bp}-bottom {
      align-items: flex-end;
    }

    &--#{$bp}-first {
      order: -1;
    }

    &--#{$bp}-last {
      order: 1;
    }
  }
}


////////////////////////
////////////////////////
// BUILD GRID
////////////////////////

@mixin build-grid($bp) {

  @include flex-columns($bp);
  @include flex-item-attributes($bp);
  @include flex-box-attributes($bp);

}


////////////////////////
////////////////////////
// ASSEMBLE GRID
////////////////////////

// breakpoint xs
@include build-grid(xs);

// breakpoint small
@media (min-width: $break-sm) {
  @include build-grid(sm);
}

// breakpoint medium
@media (min-width: $break-md) {
  @include build-grid(md);
}

// breakpoint large
@media (min-width: $break-lg) {
  @include build-grid(lg);
}

// breakpoint extra-large
@media (min-width: $break-xl) {
  @include build-grid(xl);
}
